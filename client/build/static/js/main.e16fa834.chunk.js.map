{"version":3,"sources":["components/login.js","components/errors.js","components/game.js","App.js","reportWebVitals.js","index.js","store.js"],"names":["Login","props","useState","username","setUsername","password","setPassword","handleSubmit","e","preventDefault","dispatch","type","ACTIONS","ERROR","payload","errors","loginUser","then","res","LOGIN","uuid","data","handleKeyDown","key","id","className","onChange","target","value","placeholder","onKeyDown","onClick","Errors","errorClasses","state","length","map","err","ind","suits","numbers","backOfCard","src","alt","Game","updateState","forceUpdate","useCallback","socket","lobbyPage","setLobbyPage","newRoomName","setNewRoomName","allPlayers","setAllPlayers","turnIndicatorInd","setTurnIndicatorInd","centerCards","setCenterCards","centerPlayer","setCenterPlayer","cardsToPlay","setCardsToPlay","hand","setHand","clearErrors","createRoomButton","createNewRoom","handleJoinRoom","room","refreshButton","getAllRooms","GET_ROOMS","rooms","room_name","emit","reset","newCardsToPlay","forEach","card_id","cardFace","val","Math","floor","suit","cardClass","toggleCard","useEffect","on","players","JOIN","newAllPlayers","i","push","playerNames","hands","first_player","console","log","newTurnInd","card_arr","card_player","next_player","hands_names","names","newTurnIndicator","newCenterInd","player_names","player_hands","player","oldInd","render","header_info","buttons","current_room","undefined","maxPages","ceil","slice","prevPage","style","width","center","card_ind","sendCards","playersHand","playHand","Object","values","every","bool","Array","fill","transform","zIndex","header_div","io","transports","App","useReducer","reducer","window","screen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","axios","require","crypto","action","passHasher","createHash","update","Buffer","from","passHash","digest","post","get","name"],"mappings":"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","file":"static/js/main.e16fa834.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {ACTIONS, loginUser} from \"../store\";\r\n\r\n\r\nfunction Login(props){\r\n    let [username, setUsername] = useState(\"\");\r\n    let [password, setPassword] = useState(\"\");\r\n\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        if(username === \"\" || password === \"\") return;\r\n        props.dispatch({type: ACTIONS.ERROR, payload: {errors: []}})\r\n        loginUser(username, password).then(res => {\r\n            props.dispatch({type: ACTIONS.LOGIN, payload:{uuid: res.data.uuid, username:res.data.username, errors: res.data.errors}})\r\n        });\r\n    }\r\n\r\n    function handleKeyDown(e){\r\n        if(e.key === \"Enter\"){\r\n            handleSubmit(e);\r\n        }\r\n    }\r\n    return <div id=\"login-box\">\r\n        <label>Username: </label><input id=\"username\" className=\"login-input\" onChange={e => setUsername(e.target.value)} value={username} placeholder=\"username\" onKeyDown={handleKeyDown}/>\r\n        <label>Password: </label><input id=\"password\" className=\"login-input\" onChange={e => setPassword(e.target.value)} value={password} placeholder=\"password\" type=\"password\" onKeyDown={handleKeyDown}/>\r\n        <button onClick={handleSubmit} >Register/Login</button>\r\n    </div>\r\n}\r\n\r\nexport default Login;","import {ACTIONS} from \"../store\";\r\n\r\n\r\n  \r\n\r\nexport default function Errors(props){\r\n    function clearErrors(){\r\n        props.dispatch({\r\n                type: ACTIONS.ERROR, \r\n                payload: {errors: []}\r\n        })\r\n    }\r\n    let errorClasses = \"noselect\";\r\n    if(props.state.errors.length === 0){\r\n        errorClasses += \" hidden\"\r\n    }\r\n    return <div id=\"error-window\" className={errorClasses} onClick={clearErrors}>\r\n        <div id=\"error-header\">\r\n            <div><h1>Errors</h1></div>\r\n        </div>\r\n        <div id=\"error-body\">\r\n            {props.state.errors.map((err, ind) => <div key={`err${ind}`} className=\"errors\">{err}</div>)}\r\n        </div>\r\n    </div>\r\n}","import {useEffect, useState, useCallback} from \"react\";\r\nimport { ACTIONS, createNewRoom, getAllRooms } from \"../store\";\r\n\r\n\r\nconst suits = [\"D\", \"C\", \"H\", \"S\"];\r\nconst numbers = [\"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\", \"2\"];\r\n\r\nconst backOfCard = <img className=\"card noselect\" src={`cards/RED_BACK.svg`} alt=\"Red Card Back\"/>\r\n\r\nconst PAGE_LIMIT = 8;\r\n\r\nexport default function Game(props){\r\n    // forceUpdate\r\n    const [, updateState] = useState();\r\n    const forceUpdate = useCallback(() => updateState({}), []); \r\n    // socket\r\n    const socket = props.socket;\r\n    let [lobbyPage, setLobbyPage] = useState(0); // lobby pages\r\n    let [newRoomName, setNewRoomName] = useState(\"\"); //room name input\r\n    let [allPlayers, setAllPlayers] = useState([\"You\", \"Right Opponent\", \"\", \"Left Opponent\"]); // player names\r\n    let [turnIndicatorInd, setTurnIndicatorInd] = useState(0); // just for the spinning animation\r\n    let [centerCards, setCenterCards] = useState(null); // center card to fan out\r\n    let [centerPlayer, setCenterPlayer] = useState(0);\r\n    let [cardsToPlay, setCardsToPlay] = useState({}); // cards to play. all false = pass\r\n    let [hand, setHand] = useState([[0,1,2,3], 1, 1, 1]); // your hand + lengths of the other players\r\n\r\n    // clears the error box\r\n    function clearErrors(){\r\n        props.dispatch({type: ACTIONS.ERROR, payload: {errors:[]}});\r\n    }\r\n    // handles create room button event\r\n    function createRoomButton(){\r\n        clearErrors();\r\n        if(newRoomName.length > 1){\r\n            createNewRoom(newRoomName)\r\n                .then(res => {\r\n                    handleJoinRoom(res.data.room)\r\n                    refreshButton();\r\n            })\r\n            setNewRoomName(\"\");\r\n        } else{\r\n            props.dispatch({type: ACTIONS.ERROR, payload: {errors: [\"Room name must be greater than 1 character\"]}})\r\n        }\r\n    }\r\n    // handles refresh button event\r\n    function refreshButton(){\r\n        clearErrors();\r\n        getAllRooms().then(res => {\r\n            props.dispatch({type: ACTIONS.GET_ROOMS, payload: {rooms: res.data.rooms}})\r\n        })\r\n    }\r\n    // handles the join room event\r\n    function handleJoinRoom(room_name){\r\n        clearErrors();\r\n        socket.emit(\"join_room\", room_name);\r\n    }\r\n    // create room on enter key\r\n    function handleCreateRoomEnter(e){\r\n        if(e.key === \"Enter\"){\r\n            createRoomButton();\r\n        }\r\n    }\r\n    // toggles the cards that you will play\r\n    function toggleCard(id){\r\n        let newCardsToPlay = cardsToPlay;\r\n        newCardsToPlay[id] = !newCardsToPlay[id];\r\n        setCardsToPlay(newCardsToPlay);\r\n        forceUpdate();\r\n    }\r\n    // resets cards to play\r\n    function reset(){\r\n        let newCardsToPlay = {}\r\n        hand[0].forEach(card_id => newCardsToPlay[card_id] = false);\r\n        setCardsToPlay(newCardsToPlay);\r\n    }\r\n    function findAndSetPlayerTurn(player){\r\n        for(let i = 0; i < 4; i++){\r\n            if(player === allPlayers[i]){\r\n                debugger\r\n                let newTurnInd = turnIndicatorInd\r\n                while(newTurnInd%4 != i){\r\n                    newTurnInd += 1\r\n                }\r\n                setTurnIndicatorInd(newTurnInd);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // returns the div card\r\n    function cardFace(id){\r\n        let val = numbers[Math.floor(id/4)];\r\n        let suit = suits[id%4];\r\n        let cardClass = \"card\";\r\n        if(cardsToPlay[id]){\r\n            cardClass += \" active\";\r\n        }\r\n        return <img className={cardClass} key={`cardId${id}`} src={`cards/${val}${suit}.svg`} onClick={()=>toggleCard(id)} alt={`${val}${suit}`}/>\r\n    }\r\n    // plays the current hand and send it to the server\r\n    function playHand(){\r\n        let sendCards = [];\r\n        let playersHand = hand[0];\r\n        for(let i = 0; i < playersHand.length; i++){\r\n            if(cardsToPlay[playersHand[i]]){\r\n                sendCards.push(playersHand[i]);\r\n            } \r\n        }\r\n        reset();\r\n        if(sendCards.length === 0){\r\n            socket.emit(\"pass\");\r\n        } else{\r\n            socket.emit(\"play_cards\", sendCards)\r\n        }\r\n    }\r\n    // on component mount\r\n    useEffect(()=>{\r\n        refreshButton();\r\n        // sets the connection between the server\r\n        socket.emit(\"login\", props.state.username);\r\n        // occurs when logged in else where or server restart\r\n        socket.on(\"force_logout\", ()=>{\r\n            props.dispatch({type: ACTIONS.LOGIN, payload: {uuid: null, username: null, errors: [\"Expired Session\"]}})\r\n        })\r\n        // join room action\r\n        socket.on(\"join_room\", ({room_name, players})=>{\r\n            props.dispatch({type: ACTIONS.JOIN, payload: {room_name}})\r\n            if(players){ // joined a game room\r\n                let newAllPlayers = [];\r\n                let ind = 0;\r\n                while(players[ind] !== props.state.username){\r\n                    ind += 1;\r\n                }\r\n    \r\n                for(let i = 0; i < 4; i++){\r\n                    newAllPlayers.push(players[ind+i%4]);\r\n                }\r\n                setAllPlayers(newAllPlayers);\r\n            }\r\n        })\r\n        socket.on(\"setup\", ({playerNames, hands, first_player}) =>{\r\n            console.log(playerNames, hands, first_player);\r\n            setAllPlayers(playerNames);\r\n            setHand(hands);\r\n            setCenterCards([]);\r\n            let newTurnInd = turnIndicatorInd;\r\n            for(let i = 0; i < 4; i++){\r\n                if(first_player === playerNames[i]){\r\n                    while(newTurnInd%4 != i){\r\n                        newTurnInd += 1\r\n                    }\r\n                    setTurnIndicatorInd(newTurnInd);\r\n                    setCenterPlayer(newTurnInd);\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n        socket.on(\"card_play\", ({card_arr, card_player, next_player, hands_names}) =>{\r\n            let [hands, names] = hands_names;\r\n            console.log(hands);\r\n            setCenterCards(card_arr);\r\n            setHand(hands);\r\n            for(let i = 0; i < 4; i++){\r\n                if(next_player === names[i]){\r\n                    let newTurnIndicator = turnIndicatorInd;\r\n                    while(newTurnIndicator%4 != i){\r\n                        newTurnIndicator += 1;\r\n                    }\r\n                    setTurnIndicatorInd(newTurnIndicator);\r\n                }\r\n                if(card_player === names[i]){\r\n                    let newCenterInd = centerPlayer\r\n                    while(newCenterInd%4 !== i){\r\n                        newCenterInd += 1\r\n                    }\r\n                    setCenterPlayer(newCenterInd);\r\n                }\r\n            }\r\n        })\r\n        // get names of all players\r\n        socket.on(\"player_names\", player_names => {\r\n            setAllPlayers(player_names);\r\n        })\r\n        // get hand and the length of the other players hands\r\n        socket.on(\"player_hands\", player_hands => {\r\n            setHand(player_hands);\r\n        })\r\n        // Someone played a card\r\n        // socket.on(\"center_card\", ({card_arr, player}) =>{\r\n        //     findAndSetCenterPlayer(player);\r\n        //     setCenterCards(card_arr);\r\n        // })\r\n        // Set the player turn\r\n        socket.on(\"player_turn\", player=>{\r\n            setTurnIndicatorInd(oldInd => oldInd+1)\r\n        })\r\n        socket.on(\"game_over\", ()=>{\r\n            props.dispatch({type: ACTIONS.ERROR, errors:[\"Game Over\"]});\r\n        })\r\n        // errors\r\n        socket.on(\"error\", errors=>{\r\n            props.dispatch({type: ACTIONS.ERROR, payload: {errors}})\r\n        })\r\n    }, [])\r\n\r\n    let render = <div>Loading Lobby...</div>\r\n    let header_info = [<div onClick={()=>socket.emit(\"debugging\")}>Username: {props.state.username}</div>];\r\n    let buttons = <div></div>\r\n    if(props.state.current_room === \"\" || props.state.current_room === undefined){\r\n        // Get all the rooms. Get All Rooms\r\n        let maxPages = Math.ceil(props.state.rooms.length/PAGE_LIMIT)\r\n        function prevPage(){\r\n            if(lobbyPage > 0){\r\n                setLobbyPage(prevPage=>prevPage-1)\r\n            }\r\n        }\r\n        function nextPage(){\r\n            if(lobbyPage < maxPages-1){\r\n                setLobbyPage(prevPage=>prevPage+1)\r\n            }\r\n        }\r\n        render = <div id=\"lobby\">\r\n            <div id=\"lobby-header\"> \r\n                <div>\r\n                    <label>Lobbies</label>\r\n                </div>\r\n                <div id=\"text_and_refresh\">\r\n                <input id=\"new-room-name\" onChange={e => setNewRoomName(e.target.value)} value={newRoomName} placeholder=\"New Room Name\" onKeyDown={handleCreateRoomEnter}/> \r\n                <img id=\"refresh\" src={process.env.PUBLIC_URL + \"refresh.png\"} alt=\"refresh button\" onClick={refreshButton}/>\r\n                </div>\r\n                <div id=\"new-room-button\" onClick={()=>createRoomButton()}>Create New Room</div>\r\n            </div>\r\n            <div id=\"lobby-body\">\r\n                {props.state.rooms.slice(lobbyPage*PAGE_LIMIT, (lobbyPage+1)*PAGE_LIMIT)\r\n                .map(room_name => <div key={`room-${room_name}`} className=\"room\" onClick={()=>handleJoinRoom(room_name)}> {room_name} </div>)}\r\n                <div className=\"lobby-pages\">\r\n                    <div onClick={prevPage} className=\"lobby-button\">Prev</div>\r\n                    <input value={lobbyPage+1} onChange={e=>{\r\n                        e.preventDefault();\r\n                        setLobbyPage(e.target.value-1);\r\n                    }} style={{width: \"20px\"}}></input> of {maxPages} \r\n                    \r\n                    <div onClick={nextPage} className=\"lobby-button\">Next</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    } else {\r\n        let center = <div id=\"start-game-btn\" onClick={()=>socket.emit(\"start_game\", props.state.current_room)}>Start Game</div>\r\n        if(centerCards !== null){\r\n            center = <div id=\"center-card\" className=\"hand hhand-compact\">{centerCards.map(card_ind => cardFace(card_ind))}</div>\r\n            buttons = <div id=\"player-buttons\">\r\n            <div className=\"hand-button\" onClick={()=>playHand()}>{Object.values(cardsToPlay).every(bool => !bool) ? \"Pass\" : \"Play\"}</div>\r\n            <div className=\"hand-button\" onClick={()=>reset()}>Reset</div>\r\n        </div>\r\n        }\r\n        // Currently in a game. Get Current Room\r\n        header_info.push(<div> Room: {props.state.current_room}</div>)\r\n        header_info.push(<div onClick={()=>handleJoinRoom(\"\")} id=\"leave-room\">Leave</div>)\r\n        render = <div> \r\n            <div id=\"game-body\">\r\n                <div id=\"opposite-hand\" className=\"hand hhand-compact noselect\">\r\n                    <div className=\"name-plate noselect\">{allPlayers[2]} {hand[2]}</div>\r\n                    {Array(hand[2]).fill(backOfCard)}\r\n                </div>\r\n                <div id=\"middle-board\">\r\n                    <div id=\"left-hand\" className=\"hand hhand-compact noselect\">\r\n                        <div className=\"name-plate noselect\">{allPlayers[3]} {hand[3]}</div>\r\n                        {Array(hand[3]).fill(backOfCard)}\r\n                    </div>\r\n                    <div>\r\n                        {center}\r\n                        <img src=\"AoSArrowB.png\" alt=\"Ace of Space Turn Indicator\" className=\"turn-indicator noselect\" style={{transform: `rotate(${180-90*turnIndicatorInd}deg)`, zIndex: 2}} />\r\n                        <img src=\"AoSArrowR.png\" alt=\"Center Card Player\" className=\"turn-indicator noselect\" style={{transform: `rotate(${180-90*centerPlayer}deg)`,}} />\r\n                    </div>\r\n                    <div id=\"right-hand\" className=\"hand hhand-compact noselect\">\r\n                        <div className=\"name-plate noselect\">{allPlayers[1]} {hand[1]}</div>\r\n                        {Array(hand[1]).fill(backOfCard)}\r\n                    </div>\r\n                </div>\r\n                <div id=\"players-area\">\r\n                    {buttons}\r\n                    <div id=\"current-hand\" className=\"hand hhand-compact active-hand\">\r\n                        {hand[0].map(card_ind => cardFace(card_ind))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    return <div>\r\n        <div id=\"game-header\">\r\n            {header_info.map(header_div => header_div)}\r\n        </div>\r\n        {render}\r\n    </div>;\r\n}","import './App.css';\n\nimport React, {useReducer} from 'react';\nimport {reducer} from \"./store\";\nimport io from \"socket.io-client\";\n\nimport Login from \"./components/login.js\";\nimport Error from \"./components/errors.js\";\nimport Game from \"./components/game.js\";\n\nconst socket = io(\"http://localhost:5001\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, {\n    uuid: null, \n    username: null,\n    rooms:[], \n    current_room: \"\",\n    errors: []\n  })\n  window.state = state;\n  let screen = <>Loading...</>\n  if(state.uuid === null || state.uuid === undefined){\n    // Login Phase\n    screen = <Login dispatch={dispatch}/>\n  } else {\n    // Game Phase\n    screen = <Game state={state} dispatch={dispatch} socket={socket}/>\n  }\n  return (\n    <div className=\"App\">\n      {screen}\n      <Error state={state} dispatch={dispatch}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const axios = require(\"axios\");\r\nconst crypto = require('crypto');\r\n\r\nexport const ACTIONS = {\r\n    LOGIN: \"login\",\r\n    JOIN: \"join_room\",\r\n    ERROR: \"error\",\r\n    GET_ROOMS: \"get_rooms\",\r\n  }\r\n  \r\nexport function reducer(state, action){\r\n    console.log(action);\r\n    switch(action.type){\r\n        case ACTIONS.LOGIN:\r\n            return {...state, uuid: action.payload.uuid, username: action.payload.username, errors: action.payload.errors, current_room: undefined}\r\n        case ACTIONS.JOIN:\r\n            return {...state, current_room: action.payload.room_name, players: action.payload.players}\r\n        case ACTIONS.GET_ROOMS:\r\n            return {...state, rooms: action.payload.rooms}\r\n        case ACTIONS.ERROR:\r\n            return {...state, errors: action.payload.errors}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport function loginUser(username, password) {\r\n\r\n    const passHasher = crypto.createHash('md5');\r\n    passHasher.update(Buffer.from(username+password, \"utf-8\"));\r\n    let passHash = passHasher.digest('hex');\r\n    return axios.post(\"/api/login\", {\r\n        username,\r\n        password:passHash\r\n    })\r\n}\r\n\r\nexport function getAllRooms(){\r\n    return axios.get(\"/api/get_rooms\")\r\n}\r\n\r\nexport function createNewRoom(name){\r\n    return axios.post(\"/api/create_room\", {\r\n        name\r\n    })\r\n}\r\n\r\nexport function joinRoom(room_name, uuid){\r\n    return axios.post(\"/api/join_room\", {\r\n        uuid,\r\n        room_name\r\n    })\r\n}"],"sourceRoot":""}